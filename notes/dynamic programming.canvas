{
	"nodes":[
		{"id":"6e0b6e9dea8286ed","type":"text","text":"# Dynamic programming","x":-243,"y":-455,"width":483,"height":55},
		{"id":"40aa320925d58320","type":"text","text":"# DP aglos\n- Every dynamic-programming algorithm starts with a grid.\n- The grid starts out empty. You’re going to fill in each cell of the grid. Once the grid is filled in, you’ll have your answer to this problem!\n- Dynamic programming only works when each subproblem is discrete—when it doesn’t depend on other subproblems\n- ","x":-333,"y":-261,"width":573,"height":381},
		{"id":"fb763bd3cacd3c03","type":"text","text":"## WTF\n- a technique to solve a hard problem by breaking it up into subproblems and solving those subproblems first.\n- dynamic programming starts with a small problem and builds up to the big problem\n- Dynamic programming is useful when you’re trying to optimize something given a constraint. \n- You can use dynamic programming when the problem can be broken into discrete subproblems. \n- Every dynamic-programming solution involves a grid. \n- The values in the cells are usually what you’re trying to optimize. \n- Each cell is a subproblem, so think about how you can divide your problem into subproblems.\n- There’s no single formula for calculating a dynamic-programming solution.","x":-554,"y":-1240,"width":794,"height":545}
	],
	"edges":[
		{"id":"fa8a4e46d2608244","fromNode":"6e0b6e9dea8286ed","fromSide":"top","toNode":"fb763bd3cacd3c03","toSide":"bottom"},
		{"id":"aeca8c1330d1686e","fromNode":"6e0b6e9dea8286ed","fromSide":"bottom","toNode":"40aa320925d58320","toSide":"top"}
	]
}